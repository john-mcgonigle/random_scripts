#this generates a docker image of around 330mb vs 778mb for regular python
FROM python:3.6-alpine

###############################################
############# Install APK libs ################
###############################################

RUN apk add --no-cache bash
RUN apk add --no-cache build-base \
ncurses-dev \
libffi-dev \
openssl-dev \
bzip2-dev \
xz-dev  \
zlib-dev \
g++ \
cmake \
gcc \
abuild \
binutils \
binutils-doc \
gcc-doc \
cmake-doc \
boost-dev \
sqlite-dev \
alpine-sdk \
coreutils \
ghc \
gmp \
libffi \
linux-headers \
musl-dev \
curl


###############################################
############# Install PANDOC ##################
###############################################

ENV PANDOC_VERSION 2.2
ENV PANDOC_DOWNLOAD_URL https://hackage.haskell.org/package/pandoc-$PANDOC_VERSION/pandoc-$PANDOC_VERSION.tar.gz
ENV PANDOC_ROOT /usr/local/pandoc

ENV PLANTUML_VERSION 1.2017.18
ENV PLANTUML_DOWNLOAD_URL https://sourceforge.net/projects/plantuml/files/plantuml.$PLANTUML_VERSION.jar/download

ENV PATH $PATH:$PANDOC_ROOT/bin

ENV PERSISTENT_DEPS \
    graphviz \
    openjdk8 \
    python \
    py2-pip \
    sed \
    ttf-droid \
    ttf-droid-nonlatin
ENV EDGE_DEPS cabal

# Create Pandoc build space
RUN mkdir -p /pandoc-build
WORKDIR /pandoc-build

RUN apk upgrade --update && \
    apk add --no-cache --virtual .build-deps $BUILD_DEPS && \
    apk add --no-cache --virtual .persistent-deps $PERSISTENT_DEPS && \
    curl -fsSL "$PLANTUML_DOWNLOAD_URL" -o /usr/local/plantuml.jar && \
    apk add --no-cache --virtual .edge-deps $EDGE_DEPS -X http://dl-cdn.alpinelinux.org/alpine/edge/community && \
    curl -fsSL "$PANDOC_DOWNLOAD_URL" | tar -xzf - && \
        ( cd pandoc-$PANDOC_VERSION && cabal update && cabal install --only-dependencies && \
        cabal configure --prefix=$PANDOC_ROOT && \
        cabal build && \
        cabal copy && \
        cd .. ) && \
    rm -Rf pandoc-$PANDOC_VERSION/ && \
    rm -Rf /root/.cabal/ /root/.ghc/ && \
    rmdir /pandoc-build && \
    set -x; \
    mkdir -p /var/docs && \
    apk del .build-deps .edge-deps

#####################################################
############# Install BIX PROGRAMS ##################
#####################################################

ADD . /bix
WORKDIR /bix

##############  Install SAMTOOLS #############
############################################## 
ENV SAMTOOLS_INSTALL_DIR=/opt/samtools
WORKDIR /tmp


RUN wget https://github.com/samtools/samtools/releases/download/1.8/samtools-1.8.tar.bz2 && \
  tar --bzip2 -xf samtools-1.8.tar.bz2
WORKDIR /tmp/samtools-1.8
RUN ./configure --enable-plugins --prefix=$SAMTOOLS_INSTALL_DIR && \
  make all all-htslib && \
  make install install-htslib

WORKDIR /
RUN ln -s $SAMTOOLS_INSTALL_DIR/bin/samtools /usr/bin/samtools && \
  rm -rf /tmp/samtools-1.8

ENTRYPOINT ["/usr/bin/samtools"]

##############  Install bcftools #############
##############################################
#Setup ENV variables
ENV BCFTOOLS_BIN="bcftools-1.3.tar.bz2" \
BCFTOOLS_PLUGINS="/usr/local/libexec/bcftools" \
BCFTOOLS_VERSION="1.3"

##############  Install BCFTools #############
##############################################
RUN curl -fsSL https://github.com/samtools/bcftools/releases/download/$BCFTOOLS_VERSION/$BCFTOOLS_BIN -o /opt/$BCFTOOLS_BIN \
&& tar xvjf /opt/$BCFTOOLS_BIN -C /opt/ \
&& cd /opt/bcftools-$BCFTOOLS_VERSION \
&& make \
&& make install \
&& rm -rf /opt/$BCFTOOLS_BIN /opt/bcftools-$BCFTOOLS_VERSION

##############  Install GOSSAMER #############
##############################################
ENV GOSSAMER_INSTALL_DIR=/opt/gossamer-master/build/

WORKDIR /opt
RUN wget https://github.com/data61/gossamer/archive/master.zip
RUN unzip master.zip

WORKDIR /opt/gossamer-master
RUN mkdir build

WORKDIR /opt/gossamer-master/build
RUN cmake ..
RUN make
RUN make test
RUN make install

RUN ln -s $GOSSAMER_INSTALL_DIR/src/xenome /usr/bin/xenome
RUN ln -s $GOSSAMER_INSTALL_DIR/src/gossple /usr/bin/gossple
RUN ln -s $GOSSAMER_INSTALL_DIR/src/goss /usr/bin/goss
RUN ln -s $GOSSAMER_INSTALL_DIR/src/electus /usr/bin/electus


#########################################################
##############  Install Anubis requirements #############
#########################################################

RUN pip install -r /bix/requirements/pipeline.txt
RUN pip install pytest mock



CMD ["/bin/bash"]
